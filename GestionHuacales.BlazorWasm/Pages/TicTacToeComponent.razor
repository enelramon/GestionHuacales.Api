@page "/gameBoard"
@inject IPartidasApiService partidasApiService
@inject IMovimientosApiService movimientosApiService

<!-- Estilos CSS integrados directamente en el componente -->
<style>
    .game-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        text-align: center;
        font-family: sans-serif;
        padding-top: 2rem;
    }

    .selection-screen h1,
    .game-screen h2 {
        margin-bottom: 1.5rem;
    }

    .player-buttons {
        display: flex;
        gap: 1rem;
    }

    /* Estilos para el tablero de juego */
    .game-board {
        display: grid;
        grid-template-columns: repeat(3, 100px);
        grid-template-rows: repeat(3, 100px);
        gap: 8px;
        margin-top: 1rem;
    }

    .cell {
        width: 100px;
        height: 100px;
        background-color: #f0f0f0;
        border: 2px solid #ccc;
        border-radius: 8px;
        font-size: 3rem;
        font-weight: bold;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .cell:hover:not(:disabled) {
            background-color: #e0e0e0;
        }

        .cell:disabled {
            cursor: not-allowed;
        }

    /* Colores para los jugadores */
    .player-x {
        color: #E91E63;
        /* Rosa */
    }

    .player-o {
        color: #2196F3;
        /* Azul */
    }

    /* Icono de búsqueda */
    .bi-search-icon {
        display: inline-block;
        width: 16px;
        height: 16px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-search' viewBox='0 0 16 16'%3E%3Cpath d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: center;
    }
</style>
<PageTitle>TicTacToe</PageTitle>


<div class="container mx-auto max-w-lg p-6 bg-white rounded-lg shadow-xl text-center">

    <div class="game-container">
        @if (!gameStarted)
        {
            <div class="container-fluid py-5">
                <h1 class="display-5 fw-bold">Tic Tac To</h1>
                <p class="fs-12">
                    Cada jugador solo debe colocar su símbolo una vez por turno y no debe ser sobre una casilla ya jugada.
                    En caso de que el jugador haga trampa el ganador será el otro. Se debe conseguir realizar una línea recta o diagonal por símbolo.
                </p>
            </div>
            <!-- PANTALLA DE SELECCIÓN DE JUGADOR -->
            <div class="selection-screen">
                <h4>Crear una partida Nueva</h4>
                <div class="player-buttons">
                    <div class="mb-3">
                        <label class="form-label">Jugador 1</label>
                        <input type="number" class="form-control" @bind="Jugador1Id" placeholder="ID Jugador 1" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Jugador 2</label>
                        <input type="number" class="form-control" @bind="Jugador2Id" placeholder="ID Jugador 2" />
                    </div>
                </div>
                <button class="btn btn-success btn-lg mt-2"
                        disabled="@(Jugador1Id == 0 || Jugador2Id == 0)"
                        @onclick="CreateGame">
                    Crear Partida
                </button>
                <hr class="my-4" />

                <h4>Unirse a Partida Existente</h4>
                <div class="form-group mt-3">
                    <label class="form-label">Selecciona tu símbolo:</label>
                    <div class="btn-group w-100" role="group">
                        <input type="radio" class="btn-check" name="playerSymbol" id="symbolX"
                               checked="@(selectedPlayerType == PlayerType.X)"
                               @onchange="() => selectedPlayerType = PlayerType.X">
                        <label class="btn btn-outline-danger" for="symbolX">
                            <span class="fs-4 fw-bold">X</span>
                        </label>

                        <input type="radio" class="btn-check" name="playerSymbol" id="symbolO"
                               checked="@(selectedPlayerType == PlayerType.O)"
                               @onchange="() => selectedPlayerType = PlayerType.O">
                        <label class="btn btn-outline-primary" for="symbolO">
                            <span class="fs-4 fw-bold">O</span>
                        </label>
                    </div>
                </div>
                <div class="form-group  mt-3">
                    <label class="form-label" for="partidaId">ID de la Partida:</label>
                    <div class="input-group">
                        <input id="partidaId" type="number" class="form-control" @bind="PartidaId" placeholder="ID de la partida" />
                        <button class="btn btn-outline-secondary" type="button"
                                disabled="@(selectedPlayerType is null)"
                                @onclick="OpenPartidasModal">
                            <span class="bi-search-icon"></span>
                        </button>
                    </div>
                </div>

                <button class="btn btn-warning btn-lg mt-2"
                        disabled="@(PartidaId == 0)"
                        @onclick="JoinGame">
                    Unirse a Partida
                </button>

            </div>
        }
        else
        {
            <!-- PANTALLA DE JUEGO -->
            <div class="game-screen">
                <h2>Partida: @PartidaId</h2>
                <h5>Tu sinbolo: @(selectedPlayerType?.ToString("g"))</h5>
                <h4 class="game-status">@GameStatus</h4>

                <div class="game-board">
                    @for (var i = 0; i < 9; i++)
                    {
                        var cellIndex = i;
                        <button class="cell @GetPlayerClass(board[cellIndex])"
                                @onclick="() => HandleCellClick(cellIndex)"
                                disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
                            @board[cellIndex]?.ToString()
                        </button>
                    }
                </div>
                <div class="mt-4">
                    <button class="btn btn-info me-2" @onclick="RefreshGameState" disabled="@refreshing">
                        @if (refreshing)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span> Cargando...</span>
                        }
                        else
                        {
                            <span>🔄 Refrescar Estado</span>
                        }
                    </button>

                    <button class="btn btn-secondary" @onclick="LeaveGame">
                        Salir de la Partida
                    </button>
                </div>
            </div>
        }
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

<PartidasModal IsOpen="showModal"
               IsOpenChanged="(value) => showModal = value"
               OnPartidaSelected="HandlePartidaSelected" />

@code {

    public Guid CurrentSession { get; set; }
    public int Jugador1Id { get; set; }
    public int Jugador2Id { get; set; }
    public int PartidaId { get; set; }

    private enum PlayerType { X, O }

    private bool gameStarted;
    private PlayerType? playerTypeSelection;
    private PlayerType?[] board = new PlayerType?[9];
    private PlayerType _currentPlayerType = PlayerType.X;
    private PlayerType? winner;
    private bool esEmpate;
    private string? errorMessage;
    private bool refreshing = false;
    private PlayerType? selectedPlayerType; // Símbolo seleccionado al unirse

    // Variables para el modal
    private bool showModal = false;

    private string GameStatus
    {
        get
        {
            if (winner != null) return $"🏆 ¡Ganador: {winner}!";
            return esEmpate
                ? "🤝 ¡Es un empate!"
                : $"Turno de: {_currentPlayerType}";
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CurrentSession = Guid.NewGuid();
    }

    private async Task CreateGame()
    {

        gameStarted = true;
        errorMessage = null;
        if (Jugador1Id <= 0 || Jugador2Id <= 0)
        {
            errorMessage = "Debes ingresar los jugadores.";
            return;
        }

        var response = await partidasApiService.PostPartida(Jugador1Id, Jugador2Id);
        response.OnSuccess(data => PartidaId = data.PartidaId);
        response.OnError(message => errorMessage = $"Error al crear la partida: {message}");
    }

    private async Task JoinGame()
    {
        if (PartidaId <= 0)
        {
            errorMessage = "Debes ingresar el Id de la partida.";
            return;
        }

        var response = await partidasApiService.GetPartidaAsync(PartidaId);
        await response.OnSuccessAsync(async _ =>
         {
             playerTypeSelection = selectedPlayerType;
             gameStarted = true;
             errorMessage = null;
             await RefreshGameState();
         });
        response.OnError(message => errorMessage = $"Error al unirse a la partida: {message}");
    }

    private async Task HandleCellClick(int index)
    {
        // Ignorar si la celda está ocupada o el juego terminó
        if (board[index] != null || winner != null || esEmpate)
        {
            return;
        }

        // // Verificar que sea el turno del jugador actual
        if (playerTypeSelection.HasValue && _currentPlayerType != playerTypeSelection.Value)
        {
            errorMessage = "No es tu turno. Espera a que el otro jugador haga su movimiento.";
            return;
        }

        var resp = await PostMovement(index, _currentPlayerType);
        if (!resp) return;

        board[index] = _currentPlayerType;

        winner = CheckForWinner();
        if (winner != null)
        {
            return; // El juego termina
        }

        // Comprobar empate
        esEmpate = board.All(cell => cell != null);
        if (esEmpate)
        {
            return; // El juego termina
        }

        ChangeTurn(_currentPlayerType);
    }

    private async Task<bool> PostMovement(int index, PlayerType playerSymbol)
    {
        var movimiento = new MovimientoRequest
        {
            PartidaId = PartidaId,
            Jugador = playerSymbol == PlayerType.X ?"X":"O",
            PosicionFila = index / 3,
            PosicionColumna = index % 3
        };
        var resp= await movimientosApiService.PostMovimientoAsync(movimiento);
        return resp.IsSuccess();
    }

    private void ChangeTurn(PlayerType? jugador)
    {
        if (jugador is null)
            jugador = PlayerType.O;

        _currentPlayerType = (jugador == PlayerType.X)
            ? PlayerType.O
            : PlayerType.X;
    }

    private async Task RefreshGameState()
    {
        refreshing = true;
        errorMessage = null;
        var response = await movimientosApiService.GetMovimientosAsync(PartidaId);
        response.OnSuccess(RefreshBoard);
        response.OnError(message =>
            errorMessage = $"Error al refrescar el estado del juego: {message}"
        );
        refreshing = false;
    }

    private void RefreshBoard(MovimientoResponse[] gameData)
    {
        // Limpiar el tablero
        board = new PlayerType?[9];

        PlayerType? jugador = null;
        // Reconstruir el tablero con los movimientos del servidor
        foreach (var movimiento in gameData)
        {
            var index = movimiento.PosicionFila * 3 + movimiento.PosicionColumna;
            if (index > 8) return;

            jugador = movimiento.Jugador == "X" ? PlayerType.X : PlayerType.O;
            board[index] = jugador;
        }
        ChangeTurn(jugador);

        winner = CheckForWinner();

        esEmpate = !winner.HasValue && board.All(cell => cell != null);
    }

    private PlayerType? CheckForWinner()
    {
        var winningLines = new[]
        {
             new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8},// Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8},// Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6}// Diagonales
        };

        foreach (var line in winningLines)
        {
            var (a, b, c) = (line[0], line[1], line[2]);
            if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
            {
                return board[a];
            }
        }

        return null; // No hay ganador
    }

    private string GetPlayerClass(PlayerType? player)
    {
        if (!player.HasValue) return "";
        return player == PlayerType.X ? "player-x" : "player-o";
    }
    private void LeaveGame()
    {
        gameStarted = false;
        PartidaId = 0;
        Jugador1Id = 0;
        Jugador2Id = 0;
        playerTypeSelection = null;
        board = new PlayerType?[9];
        errorMessage = null;
    }

    private void OpenPartidasModal()
    {
        showModal = true;
    }

    private async Task HandlePartidaSelected(int partidaId)
    {
        PartidaId = partidaId;
        await JoinGame();
    }

}
